library(tcltk2)#
win1 <- tktoplevel()#
win1$env$menu <- tk2menu(win1)           # Create a menu#
tkconfigure(win1, menu = win1$env$menu)  # Add it to the 'win1' window#
win1$env$menuFile <- tk2menu(win1$env$menu, tearoff = FALSE)#
tkadd(win1$env$menuFile, "command", label = "Quit",#
  command = function() tkdestroy(win1))#
tkadd(win1$env$menu, "cascade", label = "File", menu = win1$env$menuFile)
install.packages(tcltk)
install.packages("tcltk")
install.packages("tcltk2")
library(tcltk2)#
win1 <- tktoplevel()#
win1$env$menu <- tk2menu(win1)           # Create a menu#
tkconfigure(win1, menu = win1$env$menu)  # Add it to the 'win1' window#
win1$env$menuFile <- tk2menu(win1$env$menu, tearoff = FALSE)#
tkadd(win1$env$menuFile, "command", label = "Quit",#
  command = function() tkdestroy(win1))#
tkadd(win1$env$menu, "cascade", label = "File", menu = win1$env$menuFile)
win2 <- tktoplevel()#
win2$env$menu <- tk2menu(win2)#
tkconfigure(win2, menu = win2$env$menu)#
win2$env$menuFile <- tk2menu(win2$env$menu, tearoff = FALSE)#
# Our cascaded menu#
win2$env$menuOpenRecent <- tk2menu(win2$env$menuFile, tearoff = FALSE)#
tkadd(win2$env$menuOpenRecent, "command", label = "Recent File 1",#
  command = function() tkmessageBox(#
    message = "I don't know how to open Recent File 1", icon = "error"))#
tkadd(win2$env$menuOpenRecent, "command", label = "Recent File 2",#
  command = function() tkmessageBox(#
    message = "I don't know how to open Recent File 2", icon = "error"))#
tkadd(win2$env$menuFile, "cascade", label = "Open recent file",#
  menu = win2$env$menuOpenRecent)#
tkadd(win2$env$menuFile, "command", label = "Quit",#
  command = function() tkdestroy(win2))#
tkadd(win2$env$menu, "cascade", label = "File", menu = win2$env$menuFile)
library(tcltk2)#
win1 <- tktoplevel()#
win1$env$menu <- tk2menu(win1)           # Create a menu#
tkconfigure(win1, menu = win1$env$menu)  # Add it to the 'win1' window#
win1$env$menuFile <- tk2menu(win1$env$menu, tearoff = FALSE)#
tkadd(win1$env$menuFile, "command", label = "Quit",#
  command = function() tkdestroy(win1))#
tkadd(win1$env$menu, "cascade", label = "File", menu = win1$env$menuFile)
win3 <- tktoplevel()#
win3$env$txt <- tk2text(win3)         # Create a text widget#
tkpack(win3$env$txt, fill = "both")   # And place it on 'win3'#
#
# Create the popup menu, and its associated R function#
copyText <- function()#
  .Tcl(paste("event", "generate", .Tcl.args(.Tk.ID(win3$env$txt), "<<Copy>>")))#
win3$env$txtPopup <- tk2menu(win3$env$txt, tearoff = FALSE)#
tkadd(win3$env$txtPopup, "command", label = "Copy", command = copyText)#
#
# The function that displays the popup menu at the right place#
rightClick <- function(x, y) { # x and y are the mouse coordinates#
  # tkwinfo() return several infos#
  rootx <- as.integer(tkwinfo("rootx", win3$env$txt))#
  rooty <- as.integer(tkwinfo("rooty", win3$env$txt))#
  xTxt <- as.integer(x) + rootx#
  yTxt <- as.integer(y) + rooty#
  # Create a Tcl command in a character string and run it#
  .Tcl(paste("tk_popup", .Tcl.args(win3$env$txtPopup, xTxt, yTxt)))#
}#
tkbind(win3$env$txt, "<Button-3>", rightClick) # Tcl recognizes three mouse buttons#
# For mouses having two buttons, the right one is still labelled 'Button-3'!
library(tcltk2)#
filename <- tclvalue(tkgetOpenFile()) # Very simple, isn't it?#
if (!nchar(filename)) {#
  tkmessageBox(message = "No file was selected!")#
} else {#
  tkmessageBox(message = paste("The file selected was", filename))#
}
getcsv <- function() {#
  name <- tclvalue(tkgetOpenFile(#
    filetypes = "{ {CSV Files} {.csv} } { {All Files} * }"))#
  if (name == "")#
    return(data.frame()) # Return an empty data frame if no file was selected#
  data <- read.csv(name)#
  assign("csv_data", data, envir = .GlobalEnv)#
  cat("The imported data are in csv_data\n")#
}#
#
win1 <- tktoplevel()#
win1$env$butSelect <- tk2button(win1, text = "Select CSV File", command = getcsv)#
tkpack(win1$env$butSelect)#
# The content of the CSV file is placed in the variable 'csv_data' in the global environment
library(tcltk2)#
filename <- tclvalue(tkgetOpenFile()) # Very simple, isn't it?#
if (!nchar(filename)) {#
  tkmessageBox(message = "No file was selected!")#
} else {#
  tkmessageBox(message = paste("The file selected was", filename))#
}
library(tcltk2) # For themed message boxes; library(tcltk) is fine too here#
res <- tkmessageBox(title = "Greetings from R TclTk",#
  message = "Hello, world!", icon = "info", type = "ok")
?tkmessageBox
tkmessageBox(title = "Greetings from R TclTk",#
  message = "Hello, world!", icon = "info", type = "ok")
filename <- tclvalue(tkgetOpenFile()) # Very simple, isn't it?#
if (!nchar(filename)) {#
  tkmessageBox(message = "No file was selected!")#
} else {#
  tkmessageBox(message = paste("The file selected was", filename))#
}
messsageBox <- tkmessageBox(title = "Load data",#
	                       message = "Select survey data to process", #
	                       icon = "info", #
	                       type = "ok")#
##
#  Open a dialog box to select directory and data file#
##
fileName <- try(file.choose(), silent = TRUE)#
##
#  Determine if a file has been selected. Provides warning#
#  if no file is selected.#
##
if(class(fileName) == "try-error")#
  {#
  stop("No file was selected", call. = FALSE)#
  }#
##
#  Read selected data as CSV or TXT file#
##
if(class(fileName) != "try-error")#
  {#
  surveyDataX <- try(read.csv(file = fileName, header = TRUE, sep = ","), silent = TRUE)#
  }#
##
#  If file type selected is not REC or not CSV or not TXT,#
#  show error warning#
##
if(exists("surveyDataX") && class(surveyDataX) == "try-error")#
  {#
  stop(paste("Problem reading file '", basename(fileName), "'.", sep = ","), call. = FALSE)#
  }
##
#  Open a dialog box to select directory and data file#
##
fileName <- try(file.choose(), silent = TRUE)#
##
#  Determine if a file has been selected. Provides warning#
#  if no file is selected.#
##
if(class(fileName) == "try-error")#
  {#
  stop("No file was selected", call. = FALSE)#
  }#
##
#  Read selected data as CSV or TXT file#
##
if(class(fileName) != "try-error")#
  {#
  surveyDataX <- try(read.csv(file = fileName, header = TRUE, sep = ","), silent = TRUE)#
  }#
##
#  If file type selected is not REC or not CSV or not TXT,#
#  show error warning#
##
if(exists("surveyDataX") && class(surveyDataX) == "try-error")#
  {#
  stop(paste("Problem reading file '", basename(fileName), "'.", sep = ","), call. = FALSE)#
  }
messsageBox <- tkmessageBox(title = "Load data",#
    	                    message = "Select survey data to process", #
	                        icon = "info", #
	                        type = "ok")#
##
##
##
filename <- tclvalue(tkgetOpenFile())#
##
##
##
if (!nchar(filename)) #
  {#
  tkmessageBox(message = "No file was selected!")#
  } #
else #
  {#
  tkmessageBox(message = paste("The file selected was", filename))#
  }
messsageBox <- tkmessageBox(title = "Load data",#
    	                    message = "Select survey data to process", #
	                        icon = "info", #
	                        type = "ok")#
##
##
##
filename <- tclvalue(tkgetOpenFile())#
##
##
##
if (!nchar(filename)) #
  {#
  tkmessageBox(message = "No file was selected!")#
  } #
else #
  {#
  tkmessageBox(message = paste("The file selected was", basename(filename)))#
  }
messsageBox <- tkmessageBox(title = "Load data",#
    	                    message = "Select survey data to process", #
	                        icon = "info", #
	                        type = "ok")#
##
##
##
filename <- tclvalue(tkgetOpenFile())#
##
##
##
if (!nchar(filename)) #
  {#
  tkmessageBox(message = "No file was selected!")#
  } #
#
tkmessageBox(message = paste("The file selected was", basename(filename)))
?repeat
}
?nchar
messsageBox <- tkmessageBox(title = "Load data",#
    	                    message = "Select survey data to process", #
	                        icon = "info", #
	                        type = "ok")#
#
repeat#
  {#
  filename <- try(tclvalue(tkgetOpenFile()))#
  if(class(filename) == "try-error") #
    {#
    tkmessageBox(message = "No file was selected!")#
    } #
#
  if(exists("surveyDataX") && class(surveyDataX) == "try-error")#
    {#
    tkmessageBox(message = paste("Problem reading file '", basename(filename), "'.", sep = ",")#
#
  if(class(filename) != "try-error") break#
  }#
#
tkmessageBox(message = paste("The file selected was", basename(filename)))
filename <- try(tclvalue(tkgetOpenFile()), silent = TRUE)
class(filename)
filename
?tkgetOpenFile
tkgetOpenFile()
tclvalue(tkgetOpenFile())
try(tclvalue(tkgetOpenFile()))
tclvalue(tkgetOpenFile())
nchar(filename)
!nchar(filename)
tclvalue(tkgetOpenFile())
!nchar(filename)
tclvalue(tkgetOpenFile())
!nchar(filename)
tclvalue(tkgetOpenFile())
filename <- tclvalue(tkgetOpenFile())
!nchar(filename)
filename
filename <- tclvalue(tkgetOpenFile())
!nchar(filename)
nchar(filename)
?if
?read.csv
messsageBox <- tkmessageBox(title = "Load data",#
    	                    message = "Select survey data to process", #
	                        icon = "info", #
	                        type = "ok")#
#
repeat#
  {#
  filename <- tclvalue(tkgetOpenFile())#
  if(!nchar(filename)) #
    {#
    tkmessageBox(message = "No file was selected!")#
    } #
  surveyDataX <- try(read.csv(file = filename, header = TRUE, sep = ","), silent = TRUE)#
  if(exists("surveyDataX") && class(surveyDataX) == "try-error")#
    {#
    tkmessageBox(message = paste("Problem reading file '", basename(filename), "'.", sep = ","))#
    }#
  if(exists("surveyDataX") && class(surveyDataX) != "try-error") break#
  }
filename
class(filename)
read.csv(file = filename)
messsageBox <- tkmessageBox(title = "Load data",#
    	                    message = "Select survey data to process", #
	                        icon = "info", #
	                        type = "ok")#
#
repeat#
  {#
  repeat#
    {#
    filename <- tclvalue(tkgetOpenFile())#
    if(!nchar(filename)) #
      {#
      tkmessageBox(message = "No file was selected!")#
      }#
    if(nchar(filename) > 0) break#
    } #
  surveyDataX <- try(read.csv(file = filename, header = TRUE, sep = ","), silent = TRUE)#
  if(exists("surveyDataX") && class(surveyDataX) == "try-error")#
    {#
    tkmessageBox(message = paste("Problem reading file '", basename(filename), "'.", sep = ","))#
    }#
  if(exists("surveyDataX") && class(surveyDataX) != "try-error") break#
  }
head(surveyData)
head(surveyDataX)
repeat#
  {#
  repeat#
    {#
    filename <- tclvalue(tkgetOpenFile())#
    if(!nchar(filename)) #
      {#
      tkmessageBox(message = "No file was selected!")#
      }#
    if(nchar(filename) > 0) break#
    } #
  surveyDataX <- try(read.csv(file = filename, header = TRUE, sep = ","), silent = TRUE)#
  if(exists("surveyDataX") && class(surveyDataX) == "try-error")#
    {#
    tkmessageBox(message = paste("Problem reading file '", basename(filename), "'.", sep = ","))#
    }#
  if(exists("surveyDataX") && class(surveyDataX) != "try-error") break#
  }
head(surveyDataX)
messsageBox <- tkmessageBox(title = "Load data",#
    	                    message = "Select survey data to process", #
	                        icon = "info", #
	                        type = "ok")#
#
repeat#
  {#
  repeat#
    {#
    filename <- tclvalue(tkgetOpenFile())#
    if(!nchar(filename)) #
      {#
      tkmessageBox(message = "No file was selected!")#
      }#
    if(nchar(filename) > 0) break#
    } #
  surveyDataX <- try(read.csv(file = filename, header = TRUE, sep = ","), silent = TRUE)#
  if(exists("surveyDataX") && class(surveyDataX) == "try-error")#
    {#
    tkmessageBox(message = paste("Problem reading file '", basename(filename), "'.", sep = ","))#
    }#
  if(exists("surveyDataX") && class(surveyDataX) != "try-error") break#
  }#
#
tkmessageBox(message = paste("The file selected was", basename(filename)))
surveyDataX[1,]
read.csv(filename)
tkmessageBox(message = "Do you want to save before quitting?",#
    icon = "question", type = "yesnocancel", default = "yes")
xx <- tkmessageBox(message = "Do you want to save before quitting?",#
    icon = "question", type = "yesnocancel", default = "yes")
xx
xx[1]
class(xx)
tclValue(xx)
tclvalue(xx)
xx <- tkmessageBox(message = "Do you want to save before quitting?",#
    icon = "question", type = "yesnocancel", default = "yes")
tclvalue(xx)
modalDialog <- function(parent, #
                        title, #
                        question, #
                        entryInit, #
                        entryWidth = 20,#
                        returnValOnCancel = "ID_CANCEL")#
  {#
  dlg <- tktoplevel()#
  tkwm.deiconify(dlg)#
  tkgrab.set(dlg)#
  tkfocus(dlg)#
  tkwm.title(dlg, title)#
  textEntryVarTcl <- tclVar(paste(entryInit))#
  textEntryWidget <- tk2entry(dlg, width = paste(entryWidth), textvariable = textEntryVarTcl)#
  tkgrid(tklabel(dlg, text = question), textEntryWidget, padx = 10, pady = 15)#
  returnVal <- returnValOnCancel#
  onOK <- function() #
    {#
    returnVal <<- tclvalue(textEntryVarTcl)#
    tkgrab.release(dlg)#
    tkdestroy(dlg)#
    tkfocus(parent)#
    }#
  onCancel <- function()#
    {#
    returnVal <<- returnValOnCancel#
    tkgrab.release(dlg)#
    tkdestroy(dlg)#
    tkfocus(parent)#
    }#
  butOK <- tk2button(dlg, text = "OK", width = -6, command = onOK)#
  butCancel <- tk2button(dlg, text = "Cancel", width = -6, command = onCancel)#
  tkgrid(butCancel, butOK, padx = 10, pady = c(0, 15))#
  tkfocus(dlg)#
  tkbind(dlg, "<Destroy>", function() {tkgrab.release(dlg); tkfocus(parent)})#
  tkbind(textEntryWidget, "<Return>", onOK)#
  tkwait.window(dlg)#
  returnVal#
  }#
##
# Create a "main" window with a button which activates our dialog#
##
win1 <- tktoplevel()#
#
tktitle(win1) <- "Main window"#
#
win1$env$launchDialog <- function() #
  {#
  returnVal <- modalDialog(win1, "First Name Entry", "Enter Your First Name:", "")#
  if (returnVal == "ID_CANCEL") return()#
  tkmessageBox(title = "Greeting", message = paste0("Hello, ", returnVal, "."))#
  }#
win1$env$butDlg <- tk2button(win1, text = "Launch Dialog", command = win1$env$launchDialog)#
tkpack(win1$env$butDlg, padx = 60, pady = 50)
library(tcltk2)
modalDialog <- function(parent, #
                        title, #
                        question, #
                        entryInit, #
                        entryWidth = 20,#
                        returnValOnCancel = "ID_CANCEL")#
  {#
  dlg <- tktoplevel()#
  tkwm.deiconify(dlg)#
  tkgrab.set(dlg)#
  tkfocus(dlg)#
  tkwm.title(dlg, title)#
  textEntryVarTcl <- tclVar(paste(entryInit))#
  textEntryWidget <- tk2entry(dlg, width = paste(entryWidth), textvariable = textEntryVarTcl)#
  tkgrid(tklabel(dlg, text = question), textEntryWidget, padx = 10, pady = 15)#
  returnVal <- returnValOnCancel#
  onOK <- function() #
    {#
    returnVal <<- tclvalue(textEntryVarTcl)#
    tkgrab.release(dlg)#
    tkdestroy(dlg)#
    tkfocus(parent)#
    }#
  onCancel <- function()#
    {#
    returnVal <<- returnValOnCancel#
    tkgrab.release(dlg)#
    tkdestroy(dlg)#
    tkfocus(parent)#
    }#
  butOK <- tk2button(dlg, text = "OK", width = -6, command = onOK)#
  butCancel <- tk2button(dlg, text = "Cancel", width = -6, command = onCancel)#
  tkgrid(butCancel, butOK, padx = 10, pady = c(0, 15))#
  tkfocus(dlg)#
  tkbind(dlg, "<Destroy>", function() {tkgrab.release(dlg); tkfocus(parent)})#
  tkbind(textEntryWidget, "<Return>", onOK)#
  tkwait.window(dlg)#
  returnVal#
  }#
##
# Create a "main" window with a button which activates our dialog#
##
win1 <- tktoplevel()#
#
tktitle(win1) <- "Main window"#
#
win1$env$launchDialog <- function() #
  {#
  returnVal <- modalDialog(win1, "First Name Entry", "Enter Your First Name:", "")#
  if (returnVal == "ID_CANCEL") return()#
  tkmessageBox(title = "Greeting", message = paste0("Hello, ", returnVal, "."))#
  }#
win1$env$butDlg <- tk2button(win1, text = "Launch Dialog", command = win1$env$launchDialog)#
tkpack(win1$env$butDlg, padx = 60, pady = 50)
xx <- tkdialog()
xx <- tkdialog(title = "test")
lqas.params <- function()#
  {#
  ##
  ##
  ##
  upper.value <- tclVar("0.8")#
  lower.value <- tclVar("0.5")#
  ##
  ##
  ##
  choice <- tktoplevel()#
  ##
  ##
  ##
  tkwm.title(choice, "LQAS standards")#
  ##
  ##
  ##
  upper.entry <- tkentry(choice, textvariable = upper.value)#
  lower.entry <- tkentry(choice, textvariable = lower.value)#
  ##
  ##
  ##
  reset <- function()#
    {#
    tclvalue(upper.value) <- "0.8"#
    tclvalue(lower.value) <- "0.5"#
     }#
  ##
  ##
  ##
  reset.button <- tkbutton(choice, text = "Reset", command = reset)#
  ##
  ##
  ##
  submit <- function() #
    {#
    ##
    ##
    ##
    x <- as.numeric(tclvalue(upper.value))#
    y <- as.numeric(tclvalue(lower.value))#
    ##
    ##
    ##
    tkmessageBox(title = "LQAS standards",#
                 message = paste("Upper standard: ", x * 100, "%; Lower standard: ", y * 100, "%", sep = ""),#
                 icon = "info",#
                 type = "ok")#
    }#
  ##
  ##
  ##
  submit.button <- tkbutton(choice, text = "Submit", command = submit)#
  ##
  ##
  #      #
  quit.button <- tkbutton(choice, #
                          text = "Close Session", #
                          command = function() #
                                     {#
                                     q(save = "no")#
                                     tkdestroy(tt)#
                                     })#
  ##
  ##
  # #
  tkgrid(tklabel(choice, text = "Select upper and lower standards"), columnspan = 3, pady = 10)#
  tkgrid(tklabel(choice, text = "Upper Standard:"), upper.entry, pady = 10, padx = 10)#
  tkgrid(tklabel(choice, text = "Lower Standard:"), lower.entry, pady = 10, padx = 10)#
  tkgrid(submit.button, reset.button, quit.button, pady = 10, padx = 10)#
  }#
lqas.params
lqas.params()
library(tcltk2)
lqas.params <- function()#
  {#
  ##
  ##
  ##
  upper.value <- tclVar("0.8")#
  lower.value <- tclVar("0.5")#
  ##
  ##
  ##
  choice <- tktoplevel()#
  ##
  ##
  ##
  tkwm.title(choice, "LQAS standards")#
  ##
  ##
  ##
  upper.entry <- tkentry(choice, textvariable = upper.value)#
  lower.entry <- tkentry(choice, textvariable = lower.value)#
  ##
  ##
  ##
  reset <- function()#
    {#
    tclvalue(upper.value) <- "0.8"#
    tclvalue(lower.value) <- "0.5"#
     }#
  ##
  ##
  ##
  reset.button <- tkbutton(choice, text = "Reset", command = reset)#
  ##
  ##
  ##
  submit <- function() #
    {#
    ##
    ##
    ##
    x <- as.numeric(tclvalue(upper.value))#
    y <- as.numeric(tclvalue(lower.value))#
    ##
    ##
    ##
    tkmessageBox(title = "LQAS standards",#
                 message = paste("Upper standard: ", x * 100, "%; Lower standard: ", y * 100, "%", sep = ""),#
                 icon = "info",#
                 type = "ok")#
    }#
  ##
  ##
  ##
  submit.button <- tkbutton(choice, text = "Submit", command = submit)#
  ##
  ##
  #      #
  quit.button <- tkbutton(choice, #
                          text = "Close Session", #
                          command = function() #
                                     {#
                                     q(save = "no")#
                                     tkdestroy(tt)#
                                     })#
  ##
  ##
  # #
  tkgrid(tklabel(choice, text = "Select upper and lower standards"), columnspan = 3, pady = 10)#
  tkgrid(tklabel(choice, text = "Upper Standard:"), upper.entry, pady = 10, padx = 10)#
  tkgrid(tklabel(choice, text = "Lower Standard:"), lower.entry, pady = 10, padx = 10)#
  tkgrid(submit.button, reset.button, quit.button, pady = 10, padx = 10)#
  }#
lqas.params()
library(tcltk2)
lqas.params <- function()#
  {#
  ##
  ##
  ##
  upper.value <- tclVar("0.8")#
  lower.value <- tclVar("0.5")#
  ##
  ##
  ##
  choice <- tktoplevel()#
  ##
  ##
  ##
  tkwm.title(choice, "LQAS standards")#
  ##
  ##
  ##
  upper.entry <- tkentry(choice, textvariable = upper.value)#
  lower.entry <- tkentry(choice, textvariable = lower.value)#
  ##
  ##
  ##
  reset <- function()#
    {#
    tclvalue(upper.value) <- "0.8"#
    tclvalue(lower.value) <- "0.5"#
     }#
  ##
  ##
  ##
  reset.button <- tkbutton(choice, text = "Reset", command = reset)#
  ##
  ##
  ##
  submit <- function() #
    {#
    ##
    ##
    ##
    x <- as.numeric(tclvalue(upper.value))#
    y <- as.numeric(tclvalue(lower.value))#
    ##
    ##
    ##
    tkmessageBox(title = "LQAS standards",#
                 message = paste("Upper standard: ", x * 100, "%; Lower standard: ", y * 100, "%", sep = ""),#
                 icon = "info",#
                 type = "ok")#
    }#
  ##
  ##
  ##
  submit.button <- tkbutton(choice, text = "Submit", command = submit)#
  ##
  ##
  #      #
  quit.button <- tkbutton(choice, #
                          text = "Close Session", #
                          command = function() #
                                     {#
                                     tkdestroy(tt)#
                                     })#
  ##
  ##
  # #
  tkgrid(tklabel(choice, text = "Select upper and lower standards"), columnspan = 3, pady = 10)#
  tkgrid(tklabel(choice, text = "Upper Standard:"), upper.entry, pady = 10, padx = 10)#
  tkgrid(tklabel(choice, text = "Lower Standard:"), lower.entry, pady = 10, padx = 10)#
  tkgrid(submit.button, reset.button, quit.button, pady = 10, padx = 10)#
  }#
lqas.params()
lqas.params <- function()#
  {#
  ##
  ##
  ##
  upper.value <- tclVar("0.8")#
  lower.value <- tclVar("0.5")#
  ##
  ##
  ##
  choice <- tktoplevel()#
  ##
  ##
  ##
  tkwm.title(choice, "LQAS standards")#
  ##
  ##
  ##
  upper.entry <- tkentry(choice, textvariable = upper.value)#
  lower.entry <- tkentry(choice, textvariable = lower.value)#
  ##
  ##
  ##
  reset <- function()#
    {#
    tclvalue(upper.value) <- "0.8"#
    tclvalue(lower.value) <- "0.5"#
     }#
  ##
  ##
  ##
  reset.button <- tkbutton(choice, text = "Reset", command = reset)#
  ##
  ##
  ##
  submit <- function() #
    {#
    ##
    ##
    ##
    x <- as.numeric(tclvalue(upper.value))#
    y <- as.numeric(tclvalue(lower.value))#
    ##
    ##
    ##
    tkmessageBox(title = "LQAS standards",#
                 message = paste("Upper standard: ", x * 100, "%; Lower standard: ", y * 100, "%", sep = ""),#
                 icon = "info",#
                 type = "ok")#
    }#
  ##
  ##
  ##
  submit.button <- tkbutton(choice, text = "Submit", command = submit)#
  ##
  ##
  #      #
  quit.button <- tkbutton(choice, #
                          text = "Close Session", #
                          command = function() #
                                     {#
                                     tkdestroy(choice)#
                                     })#
  ##
  ##
  # #
  tkgrid(tklabel(choice, text = "Select upper and lower standards"), columnspan = 3, pady = 10)#
  tkgrid(tklabel(choice, text = "Upper Standard:"), upper.entry, pady = 10, padx = 10)#
  tkgrid(tklabel(choice, text = "Lower Standard:"), lower.entry, pady = 10, padx = 10)#
  tkgrid(submit.button, reset.button, quit.button, pady = 10, padx = 10)#
  }#
lqas.params()
lqas.params <- function()#
  {#
  ##
  ##
  ##
  upper.value <- tclVar("0.8")#
  lower.value <- tclVar("0.5")#
  ##
  ##
  ##
  choice <- tktoplevel()#
  ##
  ##
  ##
  tkwm.title(choice, "LQAS standards")#
  ##
  ##
  ##
  upper.entry <- tkentry(choice, textvariable = upper.value)#
  lower.entry <- tkentry(choice, textvariable = lower.value)#
  ##
  ##
  ##
  reset <- function()#
    {#
    tclvalue(upper.value) <- "0.8"#
    tclvalue(lower.value) <- "0.5"#
     }#
  ##
  ##
  ##
  reset.button <- tkbutton(choice, text = "Reset", command = reset)#
  ##
  ##
  ##
  submit <- function() #
    {#
    ##
    ##
    ##
    x <- as.numeric(tclvalue(upper.value))#
    y <- as.numeric(tclvalue(lower.value))#
    ##
    ##
    ##
    tkmessageBox(title = "LQAS standards",#
                 message = paste("Upper standard: ", x * 100, "%; Lower standard: ", y * 100, "%", sep = ""),#
                 icon = "info",#
                 type = "ok")#
    }#
  ##
  ##
  ##
  submit.button <- tkbutton(choice, text = "Submit", command = submit)#
  ##
  ##
  #      #
  quit.button <- tkbutton(choice, #
                          text = "Close Session", #
                          command = function() #
                                     {#
                                     tkdestroy(choice)#
                                     })#
  ##
  ##
  # #
  tkgrid(tklabel(choice, text = "Select upper and lower standards"), columnspan = 3, pady = 5)#
  tkgrid(tklabel(choice, text = "Upper Standard:"), upper.entry, pady = 10, padx = 5)#
  tkgrid(tklabel(choice, text = "Lower Standard:"), lower.entry, pady = 10, padx = 5)#
  tkgrid(submit.button, reset.button, quit.button, pady = 10, padx = 10)#
  }#
lqas.params()
lqas.params <- function()#
  {#
  ##
  ##
  ##
  upper.value <- tclVar("0.8")#
  lower.value <- tclVar("0.5")#
  ##
  ##
  ##
  choice <- tktoplevel()#
  ##
  ##
  ##
  tkwm.title(choice, "LQAS standards")#
  ##
  ##
  ##
  upper.entry <- tkentry(choice, textvariable = upper.value)#
  lower.entry <- tkentry(choice, textvariable = lower.value)#
  ##
  ##
  ##
  reset <- function()#
    {#
    tclvalue(upper.value) <- "0.8"#
    tclvalue(lower.value) <- "0.5"#
     }#
  ##
  ##
  ##
  reset.button <- tkbutton(choice, text = "Reset", command = reset)#
  ##
  ##
  ##
  submit <- function() #
    {#
    ##
    ##
    ##
    x <- as.numeric(tclvalue(upper.value))#
    y <- as.numeric(tclvalue(lower.value))#
    ##
    ##
    ##
    tkmessageBox(title = "LQAS standards",#
                 message = paste("Upper standard: ", x * 100, "%; Lower standard: ", y * 100, "%", sep = ""),#
                 icon = "info",#
                 type = "ok")#
    }#
  ##
  ##
  ##
  submit.button <- tkbutton(choice, text = "Submit", command = submit)#
  ##
  ##
  #      #
  quit.button <- tkbutton(choice, #
                          text = "Close Session", #
                          command = function() #
                                     {#
                                     tkdestroy(choice)#
                                     })#
  ##
  ##
  # #
  tkgrid(tklabel(choice, text = "Select upper and lower standards"), columnspan = 3, pady = 5)#
  tkgrid(tklabel(choice, text = "Upper Standard:"), upper.entry, pady = 10, padx = 5)#
  tkgrid(tklabel(choice, text = "Lower Standard:"), lower.entry, pady = 10, padx = 5)#
  tkgrid(submit.button, reset.button, quit.button, pady = 10, padx = 5)#
  }#
lqas.params()
ls
ls()
lqas.params <- function()#
  {#
  ##
  ##
  ##
  upper.value <- tclVar("0.8")#
  lower.value <- tclVar("0.5")#
  ##
  ##
  ##
  choice <- tktoplevel()#
  ##
  ##
  ##
  tkwm.title(choice, "LQAS standards")#
  ##
  ##
  ##
  upper.entry <- tkentry(choice, textvariable = upper.value)#
  lower.entry <- tkentry(choice, textvariable = lower.value)#
  ##
  ##
  ##
  reset <- function()#
    {#
    tclvalue(upper.value) <- "0.8"#
    tclvalue(lower.value) <- "0.5"#
     }#
  ##
  ##
  ##
  reset.button <- tkbutton(choice, text = "Reset", command = reset)#
  ##
  ##
  ##
  submit <- function() #
    {#
    ##
    ##
    ##
    x <- as.numeric(tclvalue(upper.value))#
    y <- as.numeric(tclvalue(lower.value))#
    ##
    ##
    ##
    tkmessageBox(title = "LQAS standards",#
                 message = paste("Upper standard: ", x * 100, "%; Lower standard: ", y * 100, "%", sep = ""),#
                 icon = "info",#
                 type = "ok")#
    }#
  ##
  ##
  ##
  submit.button <- tkbutton(choice, text = "Submit", command = submit)#
  ##
  ##
  #      #
  quit.button <- tkbutton(choice, #
                          text = "Close Session", #
                          command = function() #
                                     {#
                                     tkdestroy(choice)#
                                     })#
  ##
  ##
  # #
  tkgrid(tklabel(choice, text = "Select upper and lower standards"), columnspan = 3, pady = 5)#
  tkgrid(tklabel(choice, text = "Upper Standard:"), upper.entry, pady = 10, padx = 5)#
  tkgrid(tklabel(choice, text = "Lower Standard:"), lower.entry, pady = 10, padx = 5)#
  tkgrid(submit.button, reset.button, quit.button, pady = 10, padx = 5)#
  ##
  ##
  ##
  return(upper.value, lower.value)#
  }#
lqas.params()
lqas.params <- function()#
  {#
  ##
  ##
  ##
  upper.value <- tclVar("0.8")#
  lower.value <- tclVar("0.5")#
  ##
  ##
  ##
  choice <- tktoplevel()#
  ##
  ##
  ##
  tkwm.title(choice, "LQAS standards")#
  ##
  ##
  ##
  upper.entry <- tkentry(choice, textvariable = upper.value)#
  lower.entry <- tkentry(choice, textvariable = lower.value)#
  ##
  ##
  ##
  reset <- function()#
    {#
    tclvalue(upper.value) <- "0.8"#
    tclvalue(lower.value) <- "0.5"#
     }#
  ##
  ##
  ##
  reset.button <- tkbutton(choice, text = "Reset", command = reset)#
  ##
  ##
  ##
  submit <- function() #
    {#
    ##
    ##
    ##
    x <- as.numeric(tclvalue(upper.value))#
    y <- as.numeric(tclvalue(lower.value))#
    ##
    ##
    ##
    tkmessageBox(title = "LQAS standards",#
                 message = paste("Upper standard: ", x * 100, "%; Lower standard: ", y * 100, "%", sep = ""),#
                 icon = "info",#
                 type = "ok")#
    }#
  ##
  ##
  ##
  submit.button <- tkbutton(choice, text = "Submit", command = submit)#
  ##
  ##
  #      #
  quit.button <- tkbutton(choice, #
                          text = "Close Session", #
                          command = function() #
                                     {#
                                     tkdestroy(choice)#
                                     })#
  ##
  ##
  # #
  tkgrid(tklabel(choice, text = "Select upper and lower standards"), columnspan = 3, pady = 5)#
  tkgrid(tklabel(choice, text = "Upper Standard:"), upper.entry, pady = 10, padx = 5)#
  tkgrid(tklabel(choice, text = "Lower Standard:"), lower.entry, pady = 10, padx = 5)#
  tkgrid(submit.button, reset.button, quit.button, pady = 10, padx = 5)#
  ##
  ##
  ##
  return(upper.value); return(lower.value)#
  }#
lqas.params()
ls()
lqas.params <- function()#
  {#
  ##
  ##
  ##
  upper.value <- tclVar("0.8")#
  lower.value <- tclVar("0.5")#
  ##
  ##
  ##
  choice <- tktoplevel()#
  ##
  ##
  ##
  tkwm.title(choice, "LQAS standards")#
  ##
  ##
  ##
  upper.entry <- tkentry(choice, textvariable = upper.value)#
  lower.entry <- tkentry(choice, textvariable = lower.value)#
  ##
  ##
  ##
  reset <- function()#
    {#
    tclvalue(upper.value) <- "0.8"#
    tclvalue(lower.value) <- "0.5"#
     }#
  ##
  ##
  ##
  reset.button <- tkbutton(choice, text = "Reset", command = reset)#
  ##
  ##
  ##
  submit <- function() #
    {#
    ##
    ##
    ##
    x <- as.numeric(tclvalue(upper.value))#
    y <- as.numeric(tclvalue(lower.value))#
    ##
    ##
    ##
    tkmessageBox(title = "LQAS standards",#
                 message = paste("Upper standard: ", x * 100, "%; Lower standard: ", y * 100, "%", sep = ""),#
                 icon = "info",#
                 type = "ok")#
    ##
    ##
    ##
    return(upper.value); return(lower.value)#
    }#
  ##
  ##
  ##
  submit.button <- tkbutton(choice, text = "Submit", command = submit)#
  ##
  ##
  #      #
  quit.button <- tkbutton(choice, #
                          text = "Close Session", #
                          command = function() #
                                     {#
                                     tkdestroy(choice)#
                                     })#
  ##
  ##
  # #
  tkgrid(tklabel(choice, text = "Select upper and lower standards"), columnspan = 3, pady = 5)#
  tkgrid(tklabel(choice, text = "Upper Standard:"), upper.entry, pady = 10, padx = 5)#
  tkgrid(tklabel(choice, text = "Lower Standard:"), lower.entry, pady = 10, padx = 5)#
  tkgrid(submit.button, reset.button, quit.button, pady = 10, padx = 5)#
  }#
lqas.params()
ls()
##
##
##
upper.value <- tclVar("0.8")#
lower.value <- tclVar("0.5")#
  ##
  ##
  ##
  choice <- tktoplevel()#
  ##
  ##
  ##
  tkwm.title(choice, "LQAS standards")#
  ##
  ##
  ##
  upper.entry <- tkentry(choice, textvariable = upper.value)#
  lower.entry <- tkentry(choice, textvariable = lower.value)#
  ##
  ##
  ##
  reset <- function()#
    {#
    tclvalue(upper.value) <- "0.8"#
    tclvalue(lower.value) <- "0.5"#
    }#
  ##
  ##
  ##
  reset.button <- tkbutton(choice, text = "Reset", command = reset)#
  ##
  ##
  ##
  submit <- function() #
    {#
    ##
    ##
    ##
    x <- as.numeric(tclvalue(upper.value))#
    y <- as.numeric(tclvalue(lower.value))#
    ##
    ##
    ##
    tkmessageBox(title = "LQAS standards",#
                 message = paste("Upper standard: ", x * 100, "%; Lower standard: ", y * 100, "%", sep = ""),#
                 icon = "info",#
                 type = "ok")#
    ##
    ##
    ##
    return(upper.value); return(lower.value)#
    }#
  ##
  ##
  ##
  submit.button <- tkbutton(choice, text = "Submit", command = submit)#
  ##
  ##
  #      #
  quit.button <- tkbutton(choice, #
                          text = "Close Session", #
                          command = function() #
                                     {#
                                     tkdestroy(choice)#
                                     })#
  ##
  ##
  # #
  tkgrid(tklabel(choice, text = "Select upper and lower standards"), columnspan = 3, pady = 5)#
  tkgrid(tklabel(choice, text = "Upper Standard:"), upper.entry, pady = 10, padx = 5)#
  tkgrid(tklabel(choice, text = "Lower Standard:"), lower.entry, pady = 10, padx = 5)#
  tkgrid(submit.button, reset.button, quit.button, pady = 10, padx = 5)
ls()
upper.value
x
##
##
##
upper.value <- tclVar("0.8")#
lower.value <- tclVar("0.5")#
  ##
  ##
  ##
  choice <- tktoplevel()#
  ##
  ##
  ##
  tkwm.title(choice, "LQAS standards")#
  ##
  ##
  ##
  upper.entry <- tkentry(choice, textvariable = upper.value)#
  lower.entry <- tkentry(choice, textvariable = lower.value)#
  ##
  ##
  ##
  reset <- function()#
    {#
    tclvalue(upper.value) <- "0.8"#
    tclvalue(lower.value) <- "0.5"#
    }#
  ##
  ##
  ##
  reset.button <- tkbutton(choice, text = "Reset", command = reset)#
  ##
  ##
  ##
  submit <- function() #
    {#
    ##
    ##
    ##
    x <- as.numeric(tclvalue(upper.value))#
    y <- as.numeric(tclvalue(lower.value))#
    ##
    ##
    ##
    tkmessageBox(title = "LQAS standards",#
                 message = paste("Upper standard: ", x * 100, "%; Lower standard: ", y * 100, "%", sep = ""),#
                 icon = "info",#
                 type = "ok")#
    ##
    ##
    ##
    return(x); return(y)#
    }#
  ##
  ##
  ##
  submit.button <- tkbutton(choice, text = "Submit", command = submit)#
  ##
  ##
  #      #
  quit.button <- tkbutton(choice, #
                          text = "Close Session", #
                          command = function() #
                                     {#
                                     tkdestroy(choice)#
                                     })#
  ##
  ##
  # #
  tkgrid(tklabel(choice, text = "Select upper and lower standards"), columnspan = 3, pady = 5)#
  tkgrid(tklabel(choice, text = "Upper Standard:"), upper.entry, pady = 10, padx = 5)#
  tkgrid(tklabel(choice, text = "Lower Standard:"), lower.entry, pady = 10, padx = 5)#
  tkgrid(submit.button, reset.button, quit.button, pady = 10, padx = 5)
ls()
##
##
##
upper.value <- tclVar("0.8")#
lower.value <- tclVar("0.5")#
  ##
  ##
  ##
  choice <- tktoplevel()#
  ##
  ##
  ##
  tkwm.title(choice, "LQAS standards")#
  ##
  ##
  ##
  upper.entry <- tkentry(choice, textvariable = upper.value)#
  lower.entry <- tkentry(choice, textvariable = lower.value)#
  ##
  ##
  ##
  reset <- function()#
    {#
    tclvalue(upper.value) <- "0.8"#
    tclvalue(lower.value) <- "0.5"#
    }#
  ##
  ##
  ##
  reset.button <- tkbutton(choice, text = "Reset", command = reset)#
  ##
  ##
  ##
  submit <- function() #
    {#
    ##
    ##
    ##
    x <- as.numeric(tclvalue(upper.value))#
    y <- as.numeric(tclvalue(lower.value))#
    ##
    ##
    ##
    tkmessageBox(title = "LQAS standards",#
                 message = paste("Upper standard: ", x * 100, "%; Lower standard: ", y * 100, "%", sep = ""),#
                 icon = "info",#
                 type = "ok")#
    }#
  ##
  ##
  ##
  submit.button <- tkbutton(choice, text = "Submit", command = submit)#
  ##
  ##
  #      #
  quit.button <- tkbutton(choice, #
                          text = "Close Session", #
                          command = function() #
                                     {#
                                     tkdestroy(choice)#
                                     })#
  ##
  ##
  # #
  tkgrid(tklabel(choice, text = "Select upper and lower standards"), columnspan = 2, pady = 5)#
  tkgrid(tklabel(choice, text = "Upper Standard:"), upper.entry, pady = 10, padx = 5)#
  tkgrid(tklabel(choice, text = "Lower Standard:"), lower.entry, pady = 10, padx = 5)#
  tkgrid(submit.button, reset.button, quit.button, pady = 10, padx = 5)
##
##
##
upper.value <- tclVar("0.8")#
lower.value <- tclVar("0.5")#
  ##
  ##
  ##
  choice <- tktoplevel()#
  ##
  ##
  ##
  tkwm.title(choice, "LQAS standards")#
  ##
  ##
  ##
  upper.entry <- tkentry(choice, textvariable = upper.value)#
  lower.entry <- tkentry(choice, textvariable = lower.value)#
  ##
  ##
  ##
  reset <- function()#
    {#
    tclvalue(upper.value) <- "0.8"#
    tclvalue(lower.value) <- "0.5"#
    }#
  ##
  ##
  ##
  reset.button <- tkbutton(choice, text = "Reset", command = reset)#
  ##
  ##
  ##
  submit <- function() #
    {#
    ##
    ##
    ##
    x <- as.numeric(tclvalue(upper.value))#
    y <- as.numeric(tclvalue(lower.value))#
    ##
    ##
    ##
    tkmessageBox(title = "LQAS standards",#
                 message = paste("Upper standard: ", x * 100, "%; Lower standard: ", y * 100, "%", sep = ""),#
                 icon = "info",#
                 type = "ok")#
    }#
  ##
  ##
  ##
  submit.button <- tkbutton(choice, text = "Submit", command = submit)#
  ##
  ##
  #      #
  quit.button <- tkbutton(choice, #
                          text = "Close Session", #
                          command = function() #
                                     {#
                                     tkdestroy(choice)#
                                     })#
  ##
  ##
  # #
  tkgrid(tklabel(choice, text = "Select upper and lower standards"), columnspan = 2, pady = 1)#
  tkgrid(tklabel(choice, text = "Upper Standard:"), upper.entry, pady = 10, padx = 1)#
  tkgrid(tklabel(choice, text = "Lower Standard:"), lower.entry, pady = 10, padx = 1)#
  tkgrid(submit.button, reset.button, quit.button, pady = 10, padx = 1)
##
##
##
upper.value <- tclVar("0.8")#
lower.value <- tclVar("0.5")#
  ##
  ##
  ##
  choice <- tktoplevel()#
  ##
  ##
  ##
  tkwm.title(choice, "LQAS standards")#
  ##
  ##
  ##
  upper.entry <- tkentry(choice, textvariable = upper.value)#
  lower.entry <- tkentry(choice, textvariable = lower.value)#
  ##
  ##
  ##
  reset <- function()#
    {#
    tclvalue(upper.value) <- "0.8"#
    tclvalue(lower.value) <- "0.5"#
    }#
  ##
  ##
  ##
  reset.button <- tkbutton(choice, text = "Reset", command = reset)#
  ##
  ##
  ##
  submit <- function() #
    {#
    ##
    ##
    ##
    x <- as.numeric(tclvalue(upper.value))#
    y <- as.numeric(tclvalue(lower.value))#
    ##
    ##
    ##
    tkmessageBox(title = "LQAS standards",#
                 message = paste("Upper standard: ", x * 100, "%; Lower standard: ", y * 100, "%", sep = ""),#
                 icon = "info",#
                 type = "ok")#
    }#
  ##
  ##
  ##
  submit.button <- tkbutton(choice, text = "Submit", command = submit)#
  ##
  ##
  #      #
  quit.button <- tkbutton(choice, #
                          text = "Close Session", #
                          command = function() #
                                     {#
                                     tkdestroy(choice)#
                                     })#
  ##
  ##
  # #
  tkgrid(tklabel(choice, text = "Select upper and lower standards"), columnspan = 2, pady = 5)#
  tkgrid(tklabel(choice, text = "Upper Standard:"), upper.entry, pady = 5, padx = 5)#
  tkgrid(tklabel(choice, text = "Lower Standard:"), lower.entry, pady = 5, padx = 5)#
  tkgrid(submit.button, reset.button, quit.button, pady = 5, padx = 5)
##
##
##
upper.value <- tclVar("0.8")#
lower.value <- tclVar("0.5")#
  ##
  ##
  ##
  choice <- tktoplevel()#
  ##
  ##
  ##
  tkwm.title(choice, "LQAS standards")#
  ##
  ##
  ##
  upper.entry <- tkentry(choice, textvariable = upper.value)#
  lower.entry <- tkentry(choice, textvariable = lower.value)#
  ##
  ##
  ##
  reset <- function()#
    {#
    tclvalue(upper.value) <- "0.8"#
    tclvalue(lower.value) <- "0.5"#
    }#
  ##
  ##
  ##
  reset.button <- tkbutton(choice, text = "Reset", command = reset)#
  ##
  ##
  ##
  submit <- function() #
    {#
    ##
    ##
    ##
    x <- as.numeric(tclvalue(upper.value))#
    y <- as.numeric(tclvalue(lower.value))#
    ##
    ##
    ##
    tkmessageBox(title = "LQAS standards",#
                 message = paste("Upper standard: ", x * 100, "%; Lower standard: ", y * 100, "%", sep = ""),#
                 icon = "info",#
                 type = "ok")#
    ##
    ##
    ##
    tkdestroy(choice)#
    }#
  ##
  ##
  ##
  submit.button <- tkbutton(choice, text = "Submit", command = submit)#
  ##
  ##
  #      #
  quit.button <- tkbutton(choice, #
                          text = "Close Session", #
                          command = function() #
                                     {#
                                     tkdestroy(choice)#
                                     })#
  ##
  ##
  # #
  tkgrid(tklabel(choice, text = "Select upper and lower standards"), columnspan = 2, pady = 5)#
  tkgrid(tklabel(choice, text = "Upper Standard:"), upper.entry, pady = 5, padx = 5)#
  tkgrid(tklabel(choice, text = "Lower Standard:"), lower.entry, pady = 5, padx = 5)#
  tkgrid(submit.button, reset.button, pady = 5, padx = 5)
?tkmessageBox
##
##
##
upper.value <- tclVar("0.8")#
lower.value <- tclVar("0.5")#
  ##
  ##
  ##
  choice <- tktoplevel()#
  ##
  ##
  ##
  tkwm.title(choice, "LQAS standards")#
  ##
  ##
  ##
  upper.entry <- tkentry(choice, textvariable = upper.value)#
  lower.entry <- tkentry(choice, textvariable = lower.value)#
  ##
  ##
  ##
  reset <- function()#
    {#
    tclvalue(upper.value) <- "0.8"#
    tclvalue(lower.value) <- "0.5"#
    }#
  ##
  ##
  ##
  reset.button <- tkbutton(choice, text = "Reset", command = reset)#
  ##
  ##
  ##
  submit <- function() #
    {#
    ##
    ##
    ##
    x <- as.numeric(tclvalue(upper.value))#
    y <- as.numeric(tclvalue(lower.value))#
    ##
    ##
    ##
    tkmessageBox(title = "LQAS standards",#
                 message = paste("Upper standard: ", x * 100, "%; Lower standard: ", y * 100, "%. Do you wish to continue?", sep = ""),#
                 icon = "info",#
                 type = "yesno")#
    ##
    ##
    ##
    tkdestroy(choice)#
    }#
  ##
  ##
  ##
  submit.button <- tkbutton(choice, text = "Submit", command = submit)#
  ##
  ##
  #      #
  quit.button <- tkbutton(choice, #
                          text = "Close Session", #
                          command = function() #
                                     {#
                                     tkdestroy(choice)#
                                     })#
  ##
  ##
  # #
  tkgrid(tklabel(choice, text = "Select upper and lower standards"), columnspan = 2, pady = 5)#
  tkgrid(tklabel(choice, text = "Upper Standard:"), upper.entry, pady = 5, padx = 5)#
  tkgrid(tklabel(choice, text = "Lower Standard:"), lower.entry, pady = 5, padx = 5)#
  tkgrid(submit.button, reset.button, pady = 5, padx = 5)
##
##
##
upper.value <- tclVar("0.8")#
lower.value <- tclVar("0.5")#
  ##
  ##
  ##
  choice <- tktoplevel()#
  ##
  ##
  ##
  tkwm.title(choice, "LQAS standards")#
  ##
  ##
  ##
  upper.entry <- tkentry(choice, textvariable = upper.value)#
  lower.entry <- tkentry(choice, textvariable = lower.value)#
  ##
  ##
  ##
  reset <- function()#
    {#
    tclvalue(upper.value) <- "0.8"#
    tclvalue(lower.value) <- "0.5"#
    }#
  ##
  ##
  ##
  reset.button <- tkbutton(choice, text = "Reset", command = reset)#
  ##
  ##
  ##
  submit <- function() #
    {#
    ##
    ##
    ##
    x <- as.numeric(tclvalue(upper.value))#
    y <- as.numeric(tclvalue(lower.value))#
    ##
    ##
    ##
    proceed <- tkmessageBox(title = "LQAS standards",#
                            message = paste("Upper standard: ", x * 100, "%; Lower standard: ", y * 100, "%. Do you wish to use these standards?", sep = ""),#
                            icon = "question",#
                            type = "yesno")#
    ##
    ##
    ##
    tkdestroy(choice)#
    }#
  ##
  ##
  ##
  submit.button <- tkbutton(choice, text = "Submit", command = submit)#
  ##
  ##
  #      #
  quit.button <- tkbutton(choice, #
                          text = "Close Session", #
                          command = function() #
                                     {#
                                     tkdestroy(choice)#
                                     })#
  ##
  ##
  # #
  tkgrid(tklabel(choice, text = "Select upper and lower standards"), columnspan = 2, pady = 5)#
  tkgrid(tklabel(choice, text = "Upper Standard:"), upper.entry, pady = 5, padx = 5)#
  tkgrid(tklabel(choice, text = "Lower Standard:"), lower.entry, pady = 5, padx = 5)#
  tkgrid(submit.button, reset.button, pady = 5, padx = 5)
upper.value
tclvalue(upper.value)
##
##
##
upper.value <- tclVar("0.8")#
lower.value <- tclVar("0.5")#
##
##
##
choice <- tktoplevel()#
##
##
##
tkwm.title(choice, "LQAS standards")#
##
##
##
upper.entry <- tkentry(choice, textvariable = upper.value)#
lower.entry <- tkentry(choice, textvariable = lower.value)#
##
##
##
reset <- function()#
    {#
    tclvalue(upper.value) <- "0.8"#
    tclvalue(lower.value) <- "0.5"#
    }#
##
##
##
reset.button <- tkbutton(choice, text = "Reset", command = reset)#
##
##
##
submit <- function() #
  {#
  ##
  ##
  ##
  repeat#
    {#
    ##
    ##
    ##
    x <- as.numeric(tclvalue(upper.value))#
    y <- as.numeric(tclvalue(lower.value))#
    ##
    ##
    ##
    proceed <- tkmessageBox(title = "LQAS standards",#
                            message = paste("Upper standard: ", x * 100, "%; Lower standard: ", y * 100, "%. Do you wish to use these standards?", sep = ""),#
                            icon = "question",#
                            type = "yesno")#
    ##
    ##
    ##
    if(tclvalue(proceed) == "yes")#
      {#
      ##
      ##
      ##
      tkdestroy(choice)#
      ##
      ##
      ##
      break#
      }#
    }#
  }#
##
##
##
submit.button <- tkbutton(choice, text = "Submit", command = submit)#
##
##
# #
tkgrid(tklabel(choice, text = "Select upper and lower standards"), columnspan = 2, pady = 5)#
tkgrid(tklabel(choice, text = "Upper Standard:"), upper.entry, pady = 5, padx = 5)#
tkgrid(tklabel(choice, text = "Lower Standard:"), lower.entry, pady = 5, padx = 5)#
tkgrid(submit.button, reset.button, pady = 5, padx = 5)
##
##
##
upper.value <- tclVar("0.8")#
lower.value <- tclVar("0.5")#
##
##
##
choice <- tktoplevel()#
##
##
##
tkwm.title(choice, "LQAS standards")#
##
##
##
upper.entry <- tkentry(choice, textvariable = upper.value)#
lower.entry <- tkentry(choice, textvariable = lower.value)#
##
##
##
reset <- function()#
    {#
    tclvalue(upper.value) <- "0.8"#
    tclvalue(lower.value) <- "0.5"#
    }#
##
##
##
reset.button <- tkbutton(choice, text = "Reset", command = reset)#
##
##
##
submit <- function() #
  {#
  ##
  ##
  ##
  repeat#
    {#
    ##
    ##
    ##
    x <- as.numeric(tclvalue(upper.value))#
    y <- as.numeric(tclvalue(lower.value))#
    ##
    ##
    ##
    proceed <- tkmessageBox(title = "LQAS standards",#
                            message = paste("Upper standard: ", x * 100, "%; Lower standard: ", y * 100, "%. Do you wish to use these standards?", sep = ""),#
                            icon = "question",#
                            type = "yesno")#
    ##
    ##
    ##
    if(tclvalue(proceed) == "yes")#
      {#
      ##
      ##
      ##
      tkdestroy(choice)#
      ##
      ##
      ##
      break#
      }#
    ##
    ##
    ##
    if(tclvalue(proceed) == "no")#
      {#
      ##
      ##
      ##
      reset#
      ##
      ##
      ##
      tkdestroy(proceed)#
      }#
    }#
  }#
##
##
##
submit.button <- tkbutton(choice, text = "Submit", command = submit)#
##
##
# #
tkgrid(tklabel(choice, text = "Select upper and lower standards"), columnspan = 2, pady = 5)#
tkgrid(tklabel(choice, text = "Upper Standard:"), upper.entry, pady = 5, padx = 5)#
tkgrid(tklabel(choice, text = "Lower Standard:"), lower.entry, pady = 5, padx = 5)#
tkgrid(submit.button, reset.button, pady = 5, padx = 5)
proceed
##
##
##
upper.value <- tclVar("0.8")#
lower.value <- tclVar("0.5")#
##
##
##
choice <- tktoplevel()#
##
##
##
tkwm.title(choice, "LQAS standards")#
##
##
##
upper.entry <- tkentry(choice, textvariable = upper.value)#
lower.entry <- tkentry(choice, textvariable = lower.value)#
##
##
##
reset <- function()#
    {#
    tclvalue(upper.value) <- "0.8"#
    tclvalue(lower.value) <- "0.5"#
    }#
##
##
##
reset.button <- tkbutton(choice, text = "Reset", command = reset)#
##
##
##
submit <- function() #
  {#
  ##
  ##
  ##
  repeat#
    {#
    ##
    ##
    ##
    x <- as.numeric(tclvalue(upper.value))#
    y <- as.numeric(tclvalue(lower.value))#
    ##
    ##
    ##
    proceed <- tkmessageBox(title = "LQAS standards",#
                            message = paste("Upper standard: ", x * 100, "%; Lower standard: ", y * 100, "%. Do you wish to use these standards?", sep = ""),#
                            icon = "question",#
                            type = "yesno")#
    ##
    ##
    ##
    if(tclvalue(proceed) == "yes")#
      {#
      ##
      ##
      ##
      tkdestroy(choice)#
      ##
      ##
      ##
      break#
      }#
    ##
    ##
    ##
    if(tclvalue(proceed) == "no")#
      {#
      ##
      ##
      ##
      tkdestroy(proceed)#
      }#
    }#
  }#
##
##
##
submit.button <- tkbutton(choice, text = "Submit", command = submit)#
##
##
# #
tkgrid(tklabel(choice, text = "Select upper and lower standards"), columnspan = 2, pady = 5)#
tkgrid(tklabel(choice, text = "Upper Standard:"), upper.entry, pady = 5, padx = 5)#
tkgrid(tklabel(choice, text = "Lower Standard:"), lower.entry, pady = 5, padx = 5)#
tkgrid(submit.button, reset.button, pady = 5, padx = 5)
##
##
##
upper.value <- tclVar("0.8")#
lower.value <- tclVar("0.5")#
##
##
##
choice <- tktoplevel()#
##
##
##
tkwm.title(choice, "LQAS standards")#
##
##
##
upper.entry <- tkentry(choice, textvariable = upper.value)#
lower.entry <- tkentry(choice, textvariable = lower.value)#
##
##
##
reset <- function()#
    {#
    tclvalue(upper.value) <- "0.8"#
    tclvalue(lower.value) <- "0.5"#
    }#
##
##
##
reset.button <- tkbutton(choice, text = "Reset", command = reset)#
##
##
##
submit <- function() #
  {#
  ##
  ##
  ##
  repeat#
    {#
    ##
    ##
    ##
    x <- as.numeric(tclvalue(upper.value))#
    y <- as.numeric(tclvalue(lower.value))#
    ##
    ##
    ##
    proceed <- tkmessageBox(title = "LQAS standards",#
                            message = paste("Upper standard: ", x * 100, "%; Lower standard: ", y * 100, "%. Do you wish to use these standards?", sep = ""),#
                            icon = "question",#
                            type = "yesno")#
    ##
    ##
    ##
    if(tclvalue(proceed) == "yes")#
      {#
      ##
      ##
      ##
      tkdestroy(choice)#
      ##
      ##
      ##
      break#
      } #
    else #
      {#
      ##
      ##
      ##
      tkdestroy(proceed)#
      ##
      ##
      ##
      tkmessageBox(title = "LQAS standards",#
                   message = "Select upper and lower standards",#
                   icon = "info",#
                   type = "ok")#
      }#
    }#
  }#
##
##
##
submit.button <- tkbutton(choice, text = "Submit", command = submit)#
##
##
# #
tkgrid(tklabel(choice, text = "Select upper and lower standards"), columnspan = 2, pady = 5)#
tkgrid(tklabel(choice, text = "Upper Standard:"), upper.entry, pady = 5, padx = 5)#
tkgrid(tklabel(choice, text = "Lower Standard:"), lower.entry, pady = 5, padx = 5)#
tkgrid(submit.button, reset.button, pady = 5, padx = 5)
##
##
##
upper.value <- tclVar("0.8")#
lower.value <- tclVar("0.5")#
##
##
##
choice <- tktoplevel()#
##
##
##
tkwm.title(choice, "LQAS standards")#
##
##
##
upper.entry <- tkentry(choice, textvariable = upper.value)#
lower.entry <- tkentry(choice, textvariable = lower.value)#
##
##
##
reset <- function()#
    {#
    tclvalue(upper.value) <- "0.8"#
    tclvalue(lower.value) <- "0.5"#
    }#
##
##
##
reset.button <- tkbutton(choice, text = "Reset", command = reset)#
##
##
##
submit <- function() #
  {#
  ##
  ##
  ##
  repeat#
    {#
    ##
    ##
    ##
    x <- as.numeric(tclvalue(upper.value))#
    y <- as.numeric(tclvalue(lower.value))#
    ##
    ##
    ##
    proceed <- tkmessageBox(title = "LQAS standards",#
                            message = paste("Upper standard: ", x * 100, "%; Lower standard: ", y * 100, "%. Do you wish to use these standards?", sep = ""),#
                            icon = "question",#
                            type = "yesno")#
    ##
    ##
    ##
    if(tclvalue(proceed) == "yes")#
      {#
      ##
      ##
      ##
      tkdestroy(choice)#
      ##
      ##
      ##
      break#
      } #
    ##
    ##
    ##
    tkdestroy(proceed)#
    ##
    ##
    ##
    tkmessageBox(title = "LQAS standards",#
                 message = "Select upper and lower standards",#
                 icon = "info",#
                 type = "ok")#
    }#
  }#
#
##
##
##
submit.button <- tkbutton(choice, text = "Submit", command = submit)#
##
##
# #
tkgrid(tklabel(choice, text = "Select upper and lower standards"), columnspan = 2, pady = 5)#
tkgrid(tklabel(choice, text = "Upper Standard:"), upper.entry, pady = 5, padx = 5)#
tkgrid(tklabel(choice, text = "Lower Standard:"), lower.entry, pady = 5, padx = 5)#
tkgrid(submit.button, reset.button, pady = 5, padx = 5)
tkmessageBox(title = "LQAS standards",#
                            message = paste("Upper standard: ", x * 100, "%; Lower standard: ", y * 100, "%. Do you wish to use these standards?", sep = ""),#
                            icon = "question",#
                            type = "yesno")
##
    ##
    ##
    x <- as.numeric(tclvalue(upper.value))#
    y <- as.numeric(tclvalue(lower.value))#
    ##
    ##
    ##
    proceed <- tkmessageBox(title = "LQAS standards",#
                            message = paste("Upper standard: ", x * 100, "%; Lower standard: ", y * 100, "%. Do you wish to use these standards?", sep = ""),#
                            icon = "question",#
                            type = "yesno")
proceed
tclvalue(proceed)
##
    ##
    ##
    x <- as.numeric(tclvalue(upper.value))#
    y <- as.numeric(tclvalue(lower.value))#
    ##
    ##
    ##
    proceed <- tkmessageBox(title = "LQAS standards",#
                            message = paste("Upper standard: ", x * 100, "%; Lower standard: ", y * 100, "%. Do you wish to use these standards?", sep = ""),#
                            icon = "question",#
                            type = "yesno")
##
    ##
    ##
    x <- as.numeric(tclvalue(upper.value))#
    y <- as.numeric(tclvalue(lower.value))#
    ##
    ##
    ##
    proceed <- tkmessageBox(title = "LQAS standards",#
                            message = paste("Upper standard: ", x * 100, "%; Lower standard: ", y * 100, "%. Do you wish to use these standards?", sep = ""),#
                            icon = "question",#
                            type = "yesno")#
    ##
    ##
    ##
    if(tclvalue(proceed) == "no")#
      {#
      ##
      ##
      ##
      tkdestroy(proceed)#
      ##
      ##
      ##
      tkmessageBox(title = "LQAS standards",#
                   message = "Select upper and lower standards",#
                   icon = "info",#
                   type = "ok")
}
##
##
##
upper.value <- tclVar("0.8")#
lower.value <- tclVar("0.5")#
##
##
##
choice <- tktoplevel()#
##
##
##
tkwm.title(choice, "LQAS standards")#
##
##
##
upper.entry <- tkentry(choice, textvariable = upper.value)#
lower.entry <- tkentry(choice, textvariable = lower.value)#
##
##
##
reset <- function()#
    {#
    tclvalue(upper.value) <- "0.8"#
    tclvalue(lower.value) <- "0.5"#
    }#
##
##
##
reset.button <- tkbutton(choice, text = "Reset", command = reset)#
##
##
##
submit <- function() #
  {#
  ##
  ##
  ##
  repeat#
    {#
    ##
    ##
    ##
    x <- as.numeric(tclvalue(upper.value))#
    y <- as.numeric(tclvalue(lower.value))#
    ##
    ##
    ##
    proceed <- tkmessageBox(title = "LQAS standards",#
                            message = paste("Upper standard: ", x * 100, "%; Lower standard: ", y * 100, "%. Do you wish to use these standards?", sep = ""),#
                            icon = "question",#
                            type = "yesno")#
    ##
    ##
    ##
    if(tclvalue(proceed) == "no")#
      {#
      ##
      ##
      ##
      tkdestroy(proceed)#
      ##
      ##
      ##
      tkmessageBox(title = "LQAS standards",#
                   message = "Select upper and lower standards",#
                   icon = "info",#
                   type = "ok")#
      } #
    }#
  }#
#
##
##
##
submit.button <- tkbutton(choice, text = "Submit", command = submit)#
##
##
# #
tkgrid(tklabel(choice, text = "Select upper and lower standards"), columnspan = 2, pady = 5)#
tkgrid(tklabel(choice, text = "Upper Standard:"), upper.entry, pady = 5, padx = 5)#
tkgrid(tklabel(choice, text = "Lower Standard:"), lower.entry, pady = 5, padx = 5)#
tkgrid(submit.button, reset.button, pady = 5, padx = 5)
##
##
##
upper.value <- tclVar("0.8")#
lower.value <- tclVar("0.5")#
##
##
##
choice <- tktoplevel()#
##
##
##
tkwm.title(choice, "LQAS standards")#
##
##
##
upper.entry <- tkentry(choice, textvariable = upper.value)#
lower.entry <- tkentry(choice, textvariable = lower.value)#
##
##
##
reset <- function()#
    {#
    tclvalue(upper.value) <- "0.8"#
    tclvalue(lower.value) <- "0.5"#
    }#
##
##
##
reset.button <- tkbutton(choice, text = "Reset", command = reset)#
##
##
##
submit <- function() #
  {#
  ##
  ##
  ##
  x <- as.numeric(tclvalue(upper.value))#
  y <- as.numeric(tclvalue(lower.value))#
  ##
  ##
  ##
  proceed <- tkmessageBox(title = "LQAS standards",#
                          message = paste("Upper standard: ", x * 100, "%; Lower standard: ", y * 100, "%. Do you wish to use these standards?", sep = ""),#
                          icon = "question",#
                          type = "yesno")#
  ##
  ##
  ##
  if(tclvalue(proceed) == "no")#
    {#
    ##
    ##
    ##
    tkdestroy(proceed)#
    ##
    ##
    ##
    tkmessageBox(title = "LQAS standards",#
                 message = "No standards selected. Select upper and lower standards",#
                 icon = "info",#
                 type = "ok")#
    ##
    ##
    ##
    reset#
    } #
  }#
##
##
##
submit.button <- tkbutton(choice, text = "Submit", command = submit)#
##
##
# #
tkgrid(tklabel(choice, text = "Select upper and lower standards"), columnspan = 2, pady = 5)#
tkgrid(tklabel(choice, text = "Upper Standard:"), upper.entry, pady = 5, padx = 5)#
tkgrid(tklabel(choice, text = "Lower Standard:"), lower.entry, pady = 5, padx = 5)#
tkgrid(submit.button, reset.button, pady = 5, padx = 5)
##
##
##
upper.value <- tclVar("0.8")#
lower.value <- tclVar("0.5")#
##
##
##
choice <- tktoplevel()#
##
##
##
tkwm.title(choice, "LQAS standards")#
##
##
##
upper.entry <- tkentry(choice, textvariable = upper.value)#
lower.entry <- tkentry(choice, textvariable = lower.value)#
##
##
##
reset <- function()#
    {#
    tclvalue(upper.value) <- "0.8"#
    tclvalue(lower.value) <- "0.5"#
    }#
##
##
##
reset.button <- tkbutton(choice, text = "Reset", command = reset)#
##
##
##
submit <- function() #
  {#
  ##
  ##
  ##
  x <- as.numeric(tclvalue(upper.value))#
  y <- as.numeric(tclvalue(lower.value))#
  ##
  ##
  ##
  proceed <- tkmessageBox(title = "LQAS standards",#
                          message = paste("Upper standard: ", x * 100, "%; Lower standard: ", y * 100, "%. Do you wish to use these standards?", sep = ""),#
                          icon = "question",#
                          type = "yesno")#
  ##
  ##
  ##
  if(tclvalue(proceed) == "no")#
    {#
    ##
    ##
    ##
    tkdestroy(proceed)#
    ##
    ##
    ##
    tkmessageBox(title = "LQAS standards",#
                 message = "No standards selected. Select upper and lower standards",#
                 icon = "info",#
                 type = "ok")#
     } #
  }#
##
##
##
submit.button <- tkbutton(choice, text = "Submit", command = submit)#
##
##
# #
tkgrid(tklabel(choice, text = "Select upper and lower standards"), columnspan = 2, pady = 5)#
tkgrid(tklabel(choice, text = "Upper Standard:"), upper.entry, pady = 5, padx = 5)#
tkgrid(tklabel(choice, text = "Lower Standard:"), lower.entry, pady = 5, padx = 5)#
tkgrid(submit.button, reset.button, pady = 5, padx = 5)
##
##
##
upper.value <- tclVar("0.8")#
lower.value <- tclVar("0.5")#
##
##
##
choice <- tktoplevel()#
##
##
##
tkwm.title(choice, "LQAS standards")#
##
##
##
upper.entry <- tkentry(choice, textvariable = upper.value)#
lower.entry <- tkentry(choice, textvariable = lower.value)#
##
##
##
reset <- function()#
    {#
    tclvalue(upper.value) <- "0.8"#
    tclvalue(lower.value) <- "0.5"#
    }#
##
##
##
reset.button <- tkbutton(choice, text = "Reset", command = reset)#
##
##
##
submit <- function() #
  {#
  ##
  ##
  ##
  x <- as.numeric(tclvalue(upper.value))#
  y <- as.numeric(tclvalue(lower.value))#
  ##
  ##
  ##
  proceed <- tkmessageBox(title = "LQAS standards",#
                          message = paste("Upper standard: ", x * 100, "%; Lower standard: ", y * 100, "%. Do you wish to use these standards?", sep = ""),#
                          icon = "question",#
                          type = "yesno")#
 }#
##
##
##
submit.button <- tkbutton(choice, text = "Submit", command = submit)#
##
##
# #
tkgrid(tklabel(choice, text = "Select upper and lower standards"), columnspan = 2, pady = 5)#
tkgrid(tklabel(choice, text = "Upper Standard:"), upper.entry, pady = 5, padx = 5)#
tkgrid(tklabel(choice, text = "Lower Standard:"), lower.entry, pady = 5, padx = 5)#
tkgrid(submit.button, reset.button, pady = 5, padx = 5)
##
##
##
upper.value <- tclVar("0.8")#
lower.value <- tclVar("0.5")#
##
##
##
choice <- tktoplevel()#
##
##
##
tkwm.title(choice, "LQAS standards")#
##
##
##
upper.entry <- tkentry(choice, textvariable = upper.value)#
lower.entry <- tkentry(choice, textvariable = lower.value)#
##
##
##
reset <- function()#
    {#
    tclvalue(upper.value) <- "0.8"#
    tclvalue(lower.value) <- "0.5"#
    }#
##
##
##
reset.button <- tkbutton(choice, text = "Reset", command = reset)#
##
##
##
submit <- function() #
  {#
  ##
  ##
  ##
  x <- as.numeric(tclvalue(upper.value))#
  y <- as.numeric(tclvalue(lower.value))#
  ##
  ##
  ##
  proceed <- tkmessageBox(title = "LQAS standards",#
                          message = paste("Upper standard: ", x * 100, "%; Lower standard: ", y * 100, "%. Do you wish to use these standards?", sep = ""),#
                          icon = "question",#
                          type = "yesno")#
  ##
  ##
  ##
  tkmessageBox(title = "LQAS standards",#
               message = "No standards selected. Select upper and lower standards",#
               icon = "warning",#
               type = "ok")#
  }#
##
##
##
submit.button <- tkbutton(choice, text = "Submit", command = submit)#
##
##
# #
tkgrid(tklabel(choice, text = "Select upper and lower standards"), columnspan = 2, pady = 5)#
tkgrid(tklabel(choice, text = "Upper Standard:"), upper.entry, pady = 5, padx = 5)#
tkgrid(tklabel(choice, text = "Lower Standard:"), lower.entry, pady = 5, padx = 5)#
tkgrid(submit.button, reset.button, pady = 5, padx = 5)
##
##
##
upper.value <- tclVar("0.8")#
lower.value <- tclVar("0.5")#
##
##
##
choice <- tktoplevel()#
##
##
##
tkwm.title(choice, "LQAS standards")#
##
##
##
upper.entry <- tkentry(choice, textvariable = upper.value)#
lower.entry <- tkentry(choice, textvariable = lower.value)#
##
##
##
reset <- function()#
    {#
    tclvalue(upper.value) <- "0.8"#
    tclvalue(lower.value) <- "0.5"#
    }#
##
##
##
reset.button <- tkbutton(choice, text = "Reset", command = reset)#
##
##
##
submit <- function() #
  {#
  ##
  ##
  ##
  x <- as.numeric(tclvalue(upper.value))#
  y <- as.numeric(tclvalue(lower.value))#
  ##
  ##
  ##
  proceed <- tkmessageBox(title = "LQAS standards",#
                          message = paste("Upper standard: ", x * 100, "%; Lower standard: ", y * 100, "%. Do you wish to use these standards?", sep = ""),#
                          icon = "question",#
                          type = "yesno")#
  if(tclvalue(proceed) == "no")#
    {#
    ##
    ##
    ##
    tkmessageBox(title = "LQAS standards",#
                 message = "No standards selected. Select upper and lower standards",#
                 icon = "warning",#
                 type = "ok")#
    }#
  }#
##
##
##
submit.button <- tkbutton(choice, text = "Submit", command = submit)#
##
##
# #
tkgrid(tklabel(choice, text = "Select upper and lower standards"), columnspan = 2, pady = 5)#
tkgrid(tklabel(choice, text = "Upper Standard:"), upper.entry, pady = 5, padx = 5)#
tkgrid(tklabel(choice, text = "Lower Standard:"), lower.entry, pady = 5, padx = 5)#
tkgrid(submit.button, reset.button, pady = 5, padx = 5)
##
##
##
upper.value <- tclVar("0.8")#
lower.value <- tclVar("0.5")#
##
##
##
choice <- tktoplevel()#
##
##
##
tkwm.title(choice, "LQAS standards")#
##
##
##
upper.entry <- tkentry(choice, textvariable = upper.value)#
lower.entry <- tkentry(choice, textvariable = lower.value)#
##
##
##
reset <- function()#
    {#
    tclvalue(upper.value) <- "0.8"#
    tclvalue(lower.value) <- "0.5"#
    }#
##
##
##
reset.button <- tkbutton(choice, text = "Reset", command = reset)#
##
##
##
submit <- function() #
  {#
  ##
  ##
  ##
  x <- as.numeric(tclvalue(upper.value))#
  y <- as.numeric(tclvalue(lower.value))#
  ##
  ##
  ##
  proceed <- tkmessageBox(title = "LQAS standards",#
                          message = paste("Upper standard: ", x * 100, "%; Lower standard: ", y * 100, "%. Do you wish to use these standards?", sep = ""),#
                          icon = "question",#
                          type = "yesno")#
  ##
  ##
  ##
  if(tclvalue(proceed) == "no")#
    {#
    ##
    ##
    ##
    tkmessageBox(title = "LQAS standards",#
                 message = "No standards selected. Select upper and lower standards",#
                 icon = "warning",#
                 type = "ok")#
    }#
  ##
  ##
  ##
  tkdestroy(choice)#
  }#
##
##
##
submit.button <- tkbutton(choice, text = "Submit", command = submit)#
##
##
# #
tkgrid(tklabel(choice, text = "Select upper and lower standards"), columnspan = 2, pady = 5)#
tkgrid(tklabel(choice, text = "Upper Standard:"), upper.entry, pady = 5, padx = 5)#
tkgrid(tklabel(choice, text = "Lower Standard:"), lower.entry, pady = 5, padx = 5)#
tkgrid(submit.button, reset.button, pady = 5, padx = 5)
##
##
##
upper.value <- tclVar("0.8")#
lower.value <- tclVar("0.5")#
##
##
##
choice <- tktoplevel()#
##
##
##
tkwm.title(choice, "LQAS standards")#
##
##
##
upper.entry <- tkentry(choice, textvariable = upper.value)#
lower.entry <- tkentry(choice, textvariable = lower.value)#
##
##
##
reset <- function()#
    {#
    tclvalue(upper.value) <- "0.8"#
    tclvalue(lower.value) <- "0.5"#
    }#
##
##
##
reset.button <- tkbutton(choice, text = "Reset", command = reset)#
##
##
##
submit <- function() #
  {#
  ##
  ##
  ##
  x <- as.numeric(tclvalue(upper.value))#
  y <- as.numeric(tclvalue(lower.value))#
  ##
  ##
  ##
  proceed <- tkmessageBox(title = "LQAS standards",#
                          message = paste("Upper standard: ", x * 100, "%; Lower standard: ", y * 100, "%. Do you wish to use these standards?", sep = ""),#
                          icon = "question",#
                          type = "yesno")#
  ##
  ##
  ##
  if(tclvalue(proceed) == "no")#
    {#
    ##
    ##
    ##
    tkmessageBox(title = "LQAS standards",#
                 message = "No standards selected. Select upper and lower standards",#
                 icon = "warning",#
                 type = "ok")#
    }#
  if(tclvalue(proceed) == "yes")#
    {#
    tkdestroy(choice)#
    }#
  }#
##
##
##
submit.button <- tkbutton(choice, text = "Submit", command = submit)#
##
##
# #
tkgrid(tklabel(choice, text = "Select upper and lower standards"), columnspan = 2, pady = 5)#
tkgrid(tklabel(choice, text = "Upper Standard:"), upper.entry, pady = 5, padx = 5)#
tkgrid(tklabel(choice, text = "Lower Standard:"), lower.entry, pady = 5, padx = 5)#
tkgrid(submit.button, reset.button, pady = 5, padx = 5)
tk_chooseDirectory()
tk_choose.dir
tk_choose.dir()
tk_choose.dir
tk_choose.dir()
tkgetOpenFile()
?readOGR
??readOGR
xx <- tk_choose.dir()
xx
class(xx)
?str_split
??str_split
str_split(xx, pattern = "/")
library(stringr)
str_split(xx, pattern = "/")
str_split(xx, pattern = "/")[[1]]
str_split(xx, pattern = "/")[[1]][1]
length(str_split(xx, pattern = "/"))
length(str_split(xx, pattern = "/")[[1]])
yy <- str_split(xx, pattern = "/")
yy[[1]][length(y[[1]])]
yy[[1]]
yy[[1]][length(y[[1]])]
length(y[[1]])
length(y[1])
yy[[1]][length(yy[[1]])]
head(xx)
head(yy)
head(yy[[1]])
tail(yy[[1]])
last(yy[[1]])
?tail
tail(yy)
tail(yy, n = length(yy))
tail(yy, n = length(yy[[1]]))
tail(yy, n = 1)
tail(yy[[1]], n = 1)
basename(xx)
?filename
??filename
library(tcltk2)
xx <- tk_choose.dir()
library(rgdal)
dhaka <- readOGR(dsn = filename, layer = basename(filename), verbose = FALSE)
dhaka <- readOGR(dsn = xx, layer = basename(xx), verbose = FALSE)
plot(dhaka)
class(xx)
library(classInt)
?classIntervals
library(colorspace)
choose_palette
choose_palette()
install.packages("rsconnect")
rsconnect::setAccountInfo(name='validmeasures',#
			  token='423E2203F2A828ECCA534ECE5183F471',#
			  secret='<SECRET>')
rsconnect::setAccountInfo(name='validmeasures',#
			  token='423E2203F2A828ECCA534ECE5183F471',#
			  secret='Rn8cZN/zHptiiFg0tR0azQe5gH/frjthSfifPOJX')
library(googleCharts)
install.packages("googleCharts")
install.packages("googleVis")
df=data.frame(country=c("US", "GB", "BR"), #
              val1=c(10,13,14), #
              val2=c(23,12,32))
Line <- gvisLineChart(df)#
plot(Line)
library(googleVis)
Line <- gvisLineChart(df)#
plot(Line)
?gvisLineChart
?fluidPage
?fluidpage
library(shiny)
?fluidPage
library(shiny)
rsconnect::deployApp(paste(getwd(), "Dropbox/shiny", sep = ""))
rsconnect::deployApp(paste(getwd(), "/Dropbox/shiny", sep = ""))
library(shiny)
?deployApp
?rsconnect
library(rsconnect)
?rsconnect
connectUser(server = 178.62.16.143)
connectUser(server = http://178.62.16.143)
connectUser(server = "http://178.62.16.143")
connectUser(server = "http://shiny.validmeasures.org")
?t.test.cluster
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
?t.test.cluster
rnorm(800)
set.seed(1)#
y <- rnorm(800)#
group <- sample(1:2, 800, TRUE)#
cluster <- sample(1:40, 800, TRUE)#
table(cluster,group)#
t.test(y ~ group)   # R only#
t.test.cluster(y, cluster, group)
library(leaflet)
?addMiniMap
install.packages(c("rJava", "JavaGD"))
for(i in 1:length(steerIndicators$varList))#
  {#
  ##
  # Create empty matrix to aggregate interim output#
  ##
  resultDF <- matrix(ncol = 10, nrow = length(steerIndicators$varList))#
  ##
  ##
  ##
  resultDF[,1] <- unique(country)#
  resultDF[,2] <- unique(ccode)#
  resultDF[,3] <- steerIndicators$varNames#
  resultDF[,4] <- steerIndicators$varList#
  ##
  # Cycle through area types i.e. slum and other#
  ##
  for(j in unique(indicatorsDF$type))#
    {#
    ##
    # Check type of function required for current indicator is a proportion#
    ##
    if(steerIndicators$varFunction[i] == "proportion")#
      {#
	  ##
	  # Subset indicator data current area type#
	  ##
	  temp <- indicatorsDF[indicatorsDF$type == j, steerIndicators$varList[i]]#
	  ##
	  # Count total sample size for current area type#
	  ##
	  total <- length(!is.na(temp))#
	  ##
	  # Calculate lower target#
	  ##
	  class1 <- floor(total * lowerClass)#
	  ##
	  # Calculate upper target#
	  ##
	  class2 <- floor(total * upperClass)#
	  ##
      # Count total number of cases i.e. those for which indicator is TRUE#
	  ##
	  cases <- sum(temp, na.rm = TRUE)#
	  ##
	  # Classify#
	  ##
	  class <- ifelse(cases <= class1, "Low",#
	             ifelse(cases > class2, "High", "Moderate"))#
	  #      #
	  # Determine if area is slum or other#
	  #     #
	  #typeCol <- rep(j, 3)#
	  ##
	  # Add interim results to empty matrix#
	  ##
	  resultDF[i, ifelse(j == 1, 5,  8)] <- total#
	  resultDF[i, ifelse(j == 1, 6,  9)] <- cases#
	  resultDF[i, ifelse(j == 1, 7, 10)] <- class	  #
	  }#
    else#
      {#
      ##
      # Subset indicator data to current zone and current area type#
      ##
	  temp <- indicatorsDF[indicatorsDF$type == j, steerIndicators$varList[i]]#
	  ##
	  # Count total sample size for current area type#
	  ##
	  total <- length(!is.na(temp))#
	  ##
      # Set cases to 0 as indicator is not a proportion#
	  ##
	  cases <- 0#
	  ##
	  # No classification as current indicator is not a proportion#
	  ##
	  class <- NA#
	  #      #
	  # Determine if area is slum or other#
	  #     #
	  #typeCol <- rep(j, 3)#
	  ##
	  # Add interim results to empty matrix#
      ##
	  #resultDF[i, ifelse(typeCol == 1, 5:7, 8:10)] <- c(total, cases, class)#
	  ##
	  # Add interim results to empty matrix#
	  ##
	  resultDF[i, ifelse(j == 1, 5,  8)] <- total#
	  resultDF[i, ifelse(j == 1, 6,  9)] <- cases#
	  resultDF[i, ifelse(j == 1, 7, 10)] <- class	  #
	  }      #
    }#
  }
for(i in 1:length(steerIndicators$varList))#
  {#
  ##
  # Create empty matrix to aggregate interim output#
  ##
  resultDF <- matrix(ncol = 10, nrow = length(steerIndicators$varList))#
  ##
  ##
  ##
  resultDF[,1] <- unique(country)#
  resultDF[,2] <- unique(ccode)#
  resultDF[,3] <- steerIndicators$varNames#
  resultDF[,4] <- steerIndicators$varList#
  ##
  # Cycle through area types i.e. slum and other#
  ##
  for(j in unique(indicatorsDF$type))#
    {#
    ##
    # Check type of function required for current indicator is a proportion#
    ##
    #if(steerIndicators$varFunction[i] == "proportion")#
    #  {#
	  ##
	  # Subset indicator data current area type#
	  ##
	  temp <- indicatorsDF[indicatorsDF$type == j, steerIndicators$varList[i]]#
	  ##
	  # Count total sample size for current area type#
	  ##
	  total <- length(!is.na(temp))#
	  ##
	  # Calculate lower target#
	  ##
	  class1 <- floor(total * lowerClass)#
	  ##
	  # Calculate upper target#
	  ##
	  class2 <- floor(total * upperClass)#
	  ##
      # Count total number of cases i.e. those for which indicator is TRUE#
	  ##
	  cases <- sum(temp, na.rm = TRUE)#
	  ##
	  # Classify#
	  ##
	  class <- ifelse(cases <= class1, "Low",#
	             ifelse(cases > class2, "High", "Moderate"))#
	  #      #
	  # Determine if area is slum or other#
	  #     #
	  #typeCol <- rep(j, 3)#
	  ##
	  # Add interim results to empty matrix#
	  ##
	  resultDF[i, ifelse(j == 1, 5,  8)] <- total#
	  resultDF[i, ifelse(j == 1, 6,  9)] <- cases#
	  resultDF[i, ifelse(j == 1, 7, 10)] <- class	  #
	}#
  }
##
  # Create empty matrix to aggregate interim output#
  ##
  resultDF <- matrix(ncol = 10, nrow = length(steerIndicators$varList))#
  ##
  ##
  ##
  resultDF[,1] <- unique(country)#
  resultDF[,2] <- unique(ccode)#
  resultDF[,3] <- steerIndicators$varNames#
  resultDF[,4] <- steerIndicators$varList#
for(i in 1:length(steerIndicators$varList))#
  {#
  ##
  # Cycle through area types i.e. slum and other#
  ##
  for(j in unique(indicatorsDF$type))#
    {#
    ##
    # Check type of function required for current indicator is a proportion#
    ##
    if(steerIndicators$varFunction[i] == "proportion")#
      {#
	  ##
	  # Subset indicator data current area type#
	  ##
	  temp <- indicatorsDF[indicatorsDF$type == j, steerIndicators$varList[i]]#
	  ##
	  # Count total sample size for current area type#
	  ##
	  total <- length(!is.na(temp))#
	  ##
	  # Calculate lower target#
	  ##
	  class1 <- floor(total * lowerClass)#
	  ##
	  # Calculate upper target#
	  ##
	  class2 <- floor(total * upperClass)#
	  ##
      # Count total number of cases i.e. those for which indicator is TRUE#
	  ##
	  cases <- sum(temp, na.rm = TRUE)#
	  ##
	  # Classify#
	  ##
	  class <- ifelse(cases <= class1, "Low",#
	             ifelse(cases > class2, "High", "Moderate"))#
	  #      #
	  # Determine if area is slum or other#
	  #     #
	  #typeCol <- rep(j, 3)#
	  ##
	  # Add interim results to empty matrix#
	  ##
	  resultDF[i, ifelse(j == 1, 5,  8)] <- total#
	  resultDF[i, ifelse(j == 1, 6,  9)] <- cases#
	  resultDF[i, ifelse(j == 1, 7, 10)] <- class	  #
	  }#
    else#
      {#
      ##
      # Subset indicator data to current zone and current area type#
      ##
	  temp <- indicatorsDF[indicatorsDF$type == j, steerIndicators$varList[i]]#
	  ##
	  # Count total sample size for current area type#
	  ##
	  total <- length(!is.na(temp))#
	  ##
      # Set cases to 0 as indicator is not a proportion#
	  ##
	  cases <- 0#
	  ##
	  # No classification as current indicator is not a proportion#
	  ##
	  class <- NA#
	  #      #
	  # Determine if area is slum or other#
	  #     #
	  typeCol <- rep(j, 3)#
	  ##
	  # Add interim results to empty matrix#
      ##
	  resultDF[i, ifelse(typeCol == 1, 5:7, 8:10)] <- c(total, cases, class)#
	  }      #
    }#
  }
?tk2listbox
library(tcltk2)
?tk2listbox
water <- read.csv("data/water.csv", header = TRUE, sep = ",")
?MatchingFrontier
install.packages("MatchingFrontier")
setwd(/Users/username/directory.name/sudan3ie)
setwd("/Users/username/directory.name/sudan3ie")
?setwd
getwd()
temp <- read.csv("surveyResultsAll.csv")
head(temp)
temp$type <- ifelse(temp$type == "Slum", "Low Income Area", temp$type)
head(temp)
table(temp$type)
class(temp$type)
temp <- read.csv("surveyResultsAll.csv")
class(temp$type)
table(temp$type)
options(stringsAsFactors = FALSE)
temp <- read.csv("surveyResultsAll.csv")
class(temp$type)
table(temp$type)
temp$type <- ifelse(temp$type == "Slum", "Low Income Area", temp$type)
table(temp$type)
write.csv(temp, "surveyResultsAll.csv", row.names = FALSE)
library(shiny)
runApp()
runApp()
temp <- read.csv("indicatorsDataAll.csv", header = TRUE, sep = ",")
head(temp)
temp$type
